// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repositories/voucher.repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	domain "airline-voucher-seat-be/internal/models/domain"
	dto "airline-voucher-seat-be/internal/models/dto"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockVoucherRepositoryInterface is a mock of VoucherRepositoryInterface interface.
type MockVoucherRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockVoucherRepositoryInterfaceMockRecorder
}

// MockVoucherRepositoryInterfaceMockRecorder is the mock recorder for MockVoucherRepositoryInterface.
type MockVoucherRepositoryInterfaceMockRecorder struct {
	mock *MockVoucherRepositoryInterface
}

// NewMockVoucherRepositoryInterface creates a new mock instance.
func NewMockVoucherRepositoryInterface(ctrl *gomock.Controller) *MockVoucherRepositoryInterface {
	mock := &MockVoucherRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockVoucherRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVoucherRepositoryInterface) EXPECT() *MockVoucherRepositoryInterfaceMockRecorder {
	return m.recorder
}

// CheckVoucherIsExist mocks base method.
func (m *MockVoucherRepositoryInterface) CheckVoucherIsExist(ctx context.Context, checkReq dto.VoucherCheckReq) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckVoucherIsExist", ctx, checkReq)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckVoucherIsExist indicates an expected call of CheckVoucherIsExist.
func (mr *MockVoucherRepositoryInterfaceMockRecorder) CheckVoucherIsExist(ctx, checkReq interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckVoucherIsExist", reflect.TypeOf((*MockVoucherRepositoryInterface)(nil).CheckVoucherIsExist), ctx, checkReq)
}

// Create mocks base method.
func (m *MockVoucherRepositoryInterface) Create(ctx context.Context, voucher domain.Voucher) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, voucher)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockVoucherRepositoryInterfaceMockRecorder) Create(ctx, voucher interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockVoucherRepositoryInterface)(nil).Create), ctx, voucher)
}

// GetVouchers mocks base method.
func (m *MockVoucherRepositoryInterface) GetVouchers(ctx context.Context) ([]domain.Voucher, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVouchers", ctx)
	ret0, _ := ret[0].([]domain.Voucher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVouchers indicates an expected call of GetVouchers.
func (mr *MockVoucherRepositoryInterfaceMockRecorder) GetVouchers(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVouchers", reflect.TypeOf((*MockVoucherRepositoryInterface)(nil).GetVouchers), ctx)
}
